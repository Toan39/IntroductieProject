<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>